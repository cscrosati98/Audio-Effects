`timescale 1ns/1ns
module compressorTB();
logic [31:0] lsamp=32'd0;
logic [31:0] rsamp=32'd0;
logic [31:0] lsampout, rsampout;
logic [31:0] [31:0] lsound, rsound;
logic clock=1'b0;
logic slowclock=1'b0;
logic reset=1'b1;
task randomSound();
	for(int i=0; i<32; i++)begin
	 lsound[i]<=$urandom_range(32'd0,32'd4294967295);//lsamp;
	 rsound[i]<=$urandom_range(32'd0,32'd4294967295);//rsamp;
	 
	 #5 $display("Left: %d Right: %d", lsound[i], rsound[i]);
	end
endtask
task processSample();
	for(int i=0; i<32; i++) begin
	@(posedge clock);
	lsamp<=lsound[i];
	rsamp<=rsound[i];
	$display("Lout: %d Rout: %d", lsampout,rsampout);
	end
endtask



bitcrush tb(.inleft(lsamp), .inright(rsamp), //module that reduces the sample rate by using a slower clock
                    .reset(reset), .slowclock(slowclock),
                    .outleft(lsampout), .outright(rsampout));	


always #5 clock <= ~clock;
always #10 slowclock <= ~slowclock;
always #15 reset<=~reset;
initial begin

randomSound();
processSample();

end

endmodule